AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  poc

  SAM Template for poc

Parameters:
  RegionName:
    Type: String
    Default: 'eu-central-1'
    Description: Enter name of aws region since AWS::Region does not work
  BackendBucketName:
    Type: String
    Default: 'swe-bucket-bugsbunny-backend'
    Description: Enter desired S3 bucket name for backend content
  FrontendBucketName:
    Type: String
    Default: 'swe-bucket-bugsbunny-frontend'
    Description: Enter desired S3 bucket name for frontend content
  ApiStageName:
    Type: String
    Default: 'dev-api' # non funziona, Ã¨ sempre == 'dev' ???
    Description: Enter desired Api stage name
  SNSScrapingToScoringName:
    Type: String
    Default: 'swe-sns-score'
    Description: Enter desired SNS topic name
  SNSRequestToScrapeName:
    Type: String
    Default: 'swe-sns-scrape'
    Description: Enter desired SNS topic name
  DatabaseUser:
    Type: String
    Default: ''
    Description: Enter database user
  DatabasePassword:
    Type: String
    NoEcho: true
    Default: ''
    Description: Enter database password
  DatabaseHost:
    Type: String
    Default: ''
    Description: Enter database host
  DatabaseName:
    Type: String
    Default: ''
    Description: Enter database name
  InstaSessionTableName:
    Type: String
    Default: 'poc-instagram-sessions'
    Description: Enter instagram session table name

Globals:
  Function:
    Timeout: 60
    Runtime: python3.9
    Handler: function.app.lambda_handler
    Architectures:
      - x86_64
    Layers:
      - !Ref CommonLayer
      - !Ref DbLayer
    Environment:
      Variables:
        ENV_REGION_NAME:  !Ref RegionName #!Ref AWS::Region wtf non funziona
        ENV_BUCKET_NAME:  !Ref BackendBucketName
        DB_USER:          !Ref DatabaseUser
        DB_PASSWORD:      !Ref DatabasePassword
        DB_HOST:          !Ref DatabaseHost
        DB_NAME:          !Ref DatabaseName
    VpcConfig:
      SecurityGroupIds:
        - sg-07f4a769e463ffb9c
      SubnetIds:
        - subnet-05c442430ab98ad16
        - subnet-0e2905715dec21833
        - subnet-05dfc206871eba542
        - subnet-0e94a60afe6c90bd7


Resources:

  # FRONTEND

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref FrontendBucketName

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
            - Action: s3:GetObject
              Effect: Allow
              Resource: 
                Fn::Join: ['', [Fn::GetAtt: [FrontendBucket, Arn], '/*']]
              Principal:
                AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Client Origin Access Identity

  S3CachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties: 
      CachePolicyConfig: 
        Comment: Cache policy used when accessing static data from Frontend S3 Bucket
        Name: S3CachePolicy
        DefaultTTL: 86400 
        MaxTTL: 31536000 
        MinTTL: 0 
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none
          EnableAcceptEncodingGzip: true

  ApiCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties: 
      CachePolicyConfig: 
        Comment: Cache policy used when accessing Backend Api
        Name: ApiCachePolicy
        DefaultTTL: 0 
        MaxTTL: 0 
        MinTTL: 0 
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none
          EnableAcceptEncodingGzip: false

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
          - Id: ApiOrigin
            DomainName: !Sub "${Api}.execute-api.${RegionName}.amazonaws.com"
            CustomOriginConfig: 
              OriginProtocolPolicy: https-only
              OriginSSLProtocols: 
                - TLSv1.2
        CacheBehaviors:
          - PathPattern: !Sub '${ApiStageName}/*'
            TargetOriginId: ApiOrigin
            CachePolicyId: !Ref ApiCachePolicy
            ViewerProtocolPolicy : redirect-to-https
            Compress: true
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          CachePolicyId: !Ref S3CachePolicy 
          ViewerProtocolPolicy : redirect-to-https
          Compress: true

  # BACKEND

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref ApiStageName
      EndpointConfiguration:
        Type: REGIONAL

  BackendBucket:
    Type: AWS::S3::Bucket 
    Properties:
      BucketName: !Ref BackendBucketName

  SNSTopicR2S:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref SNSRequestToScrapeName
      FifoTopic: False

  SNSTopicS2S:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref SNSScrapingToScoringName
      FifoTopic: False

  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    LayerName: CommonLayer
    Properties:
      ContentUri: common
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: makefile

  DbLayer:
    Type: AWS::Serverless::LayerVersion
    LayerName: DBLayer
    Properties:
      ContentUri: db
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: makefile

  PostsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/posts/
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !Ref SNSTopicR2S
      Environment:
        Variables:
          SNS_SCORING_TOPIC: !Ref SNSTopicR2S
      Events:
        ById:
          Type: Api
          Properties:
            Path: /posts
            Method: get
            RestApiId: !Ref Api
        All:
          Type: Api
          Properties:
            Path: /posts/{id}
            Method: get
            RestApiId: !Ref Api 
        New:
          Type: Api
          Properties:
            Path: /posts
            Method: post
            RestApiId: !Ref Api

  LocationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/locations/
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !Ref SNSTopicR2S
      Events:
        ById:
          Type: Api
          Properties:
            Path: /locations
            Method: get
            RestApiId: !Ref Api
        All:
          Type: Api
          Properties:
            Path: /locations/{id}
            Method: get
            RestApiId: !Ref Api

  ProfilesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/profiles/
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !Ref SNSTopicR2S
      Events:
        ById:
          Type: Api
          Properties:
            Path: /profiles
            Method: get
            RestApiId: !Ref Api
        All:
          Type: Api
          Properties:
            Path: /profiles/{id}
            Method: get
            RestApiId: !Ref Api


  ScrapingServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/scraping/
      Environment:
        Variables:
          INSTA_USERNAME: NotABotBB1
          INSTA_SESSIONS_TABLE: !Ref InstaSessionTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref InstaSessionTableName
        - S3CrudPolicy:
            BucketName: !Ref BackendBucket
        - Statement:
            Effect: Allow
            Action: sns:Subscribe
            Resource: !Ref SNSTopicR2S
        - SNSPublishMessagePolicy:
            TopicName: !Ref SNSTopicS2S
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref SNSTopicR2S
          

  ScoringServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/scoring/
      Policies:
        - ComprehendBasicAccessPolicy: {}
        - RekognitionDetectOnlyPolicy: {}
        - S3CrudPolicy: 
            BucketName: !Ref BackendBucket
        - Statement:
            Effect: Allow
            Action: sns:Subscribe
            Resource: !Ref SNSTopicS2S
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref SNSTopicS2S

Outputs:
  CloudFrontDomain:
    Description: CloudFront domain name accessible from public
    Value: !GetAtt CloudFrontDistribution.DomainName
  ApiPath:
    Description: Api path accessible through CloudFront
    Value: !Sub '${CloudFrontDistribution.DomainName}/${ApiStageName}'

