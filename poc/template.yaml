AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  poc

  SAM Template for poc

Parameters:
  BackendBucketName:
    Type: String
    Default: 'swe-bucket-bugsbunny-backend'
    Description: Enter desired S3 bucket name for backend content
  FrontendBucketName:
    Type: String
    Default: 'swe-bucket-bugsbunny-frontend'
    Description: Enter desired S3 bucket name for frontend content
  CloudFrontCachePolicyName:
    Type: String
    Default: 'CloudFrontCachePolicy'
    Description: Enter desired cloudfront cache policy name
  SNSScrapingToScoringName:
    Type: String
    Default: 'swe-sns-score'
    Description: Enter desired SNS topic name
  RegionName:
    Type: String
    Default: 'eu-central-1'
    Description: Enter region name
  DatabaseUser:
    Type: String
    Default: ''
    Description: Enter database user
  DatabasePassword:
    Type: String
    NoEcho: true
    Default: ''
    Description: Enter database password
  DatabaseHost:
    Type: String
    Default: ''
    Description: Enter database host
  DatabaseName:
    Type: String
    Default: ''
    Description: Enter database name
  InstaSessionTableName:
    Type: String
    Default: 'poc-instagram-sessions'
    Description: Enter instagram session table name

Globals:
  Function:
    Timeout: 60
    Runtime: python3.9
    Handler: function.app.lambda_handler
    Architectures:
      - x86_64
    Layers:
      - !Ref CommonLayer
      - !Ref DbLayer
    Environment:
      Variables:
        ENV_REGION_NAME:  !Ref RegionName
        ENV_BUCKET_NAME:  !Ref BackendBucketName
        DB_USER:          !Ref DatabaseUser
        DB_PASSWORD:      !Ref DatabasePassword
        DB_HOST:          !Ref DatabaseHost
        DB_NAME:          !Ref DatabaseName


Resources:

  # FRONTEND

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref FrontendBucketName

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Client OAI'

  CloudFrontCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties: 
      CachePolicyConfig: 
        Name: !Ref CloudFrontCachePolicyName
        DefaultTTL: 86400 
        MaxTTL: 31536000 
        MinTTL: 0 
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none
          EnableAcceptEncodingGzip: false

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultRootObject: index.html
        Enabled: true
        Origins:
          - Id: !Ref FrontendBucketName
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        DefaultCacheBehavior:
          Compress: true
          CachePolicyId: !Ref CloudFrontCachePolicy 
          TargetOriginId: !Ref FrontendBucketName
          ViewerProtocolPolicy : redirect-to-https

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
            - Action: 's3:GetObject'
              Effect: Allow
              Resource: 
                !Join
                  - ''
                  - - !GetAtt FrontendBucket.Arn
                    - '/*'
              Principal:
                AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"

  # BACKEND

  BackendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BackendBucketName
      AccessControl: Private

  SNSTopicS2S:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref SNSScrapingToScoringName
      FifoTopic: False
      
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    LayerName: CommonLayer
    Properties:
      ContentUri: common
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: makefile

  DbLayer:
    Type: AWS::Serverless::LayerVersion
    LayerName: DBLayer
    Properties:
      ContentUri: db
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: makefile

  RequestsHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/requests_handler/

  ScrapingServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/scraping/
      Environment:
        Variables:
          INSTA_USERNAME: 'NotABotBB1'
          INSTA_SESSIONS_TABLE: !Ref InstaSessionTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref InstaSessionTableName
        - S3CrudPolicy:
            BucketName: !Ref BackendBucket

  ScoringServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/scoring/
      Policies:
        - ComprehendBasicAccessPolicy: {}
        - S3CrudPolicy: 
            BucketName: !Ref BackendBucket
        - Statement:
            Effect: Allow
            Action: sns:Subscribe
            Resource: !Ref SNSTopicS2S
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref SNSTopicS2S

Outputs:
  CloudFrontDomain:
    Description: CloudFront domain name accessible from public
    Value: !GetAtt CloudFrontDistribution.DomainName

